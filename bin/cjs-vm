#!/usr/bin/env node
"use strict";
const program = require('commander');
const lex = require('../src/lexico/scanner');
const parser = require('../src/sintactico/parser');
//const { parser } = require('stream-json');
const db = require('../src/vm/debug');
const Bytecode = require('../src/vm/bytecode');
const VM = require('../src/vm/vm');
const jetpack = require('fs-jetpack');


program
	.command('lex')
	.description('run setup commands for all envs')
	.option("-u, --ui", "para usar desde ide, lee el programa de stdio")
	.option("-f, --file <path>", "para leer el archivo <path>")
	.action(function (options) {
		if (options.ui) {
			lex.fromStream(process.stdin, continuar);

		} else if (options.file) {
			process.stdout.write(lex.fromFile(options.file).map((token) => {
				return `\n${token.value}`;
			}).toString());
		} else {

		}
	});

program
	.command('parse')
	.description('execute the given remote cmd')
	.option("-u, --ui", "para usar desde ide, lee el programa de stdio")
	.option("-f, --file <path>", "para leer el archivo <path>")
	.action(function (path, options) {
		let vm = new VM();

		let bytecode = parser.parse(lex.fromFile(path));
		//db.dissasemble(bytecode, 'prueba');
		if (bytecode.hasError) {
			console.log(bytecode.errors);
			
		}
		//bytecode.save();
		vm.interpret(bytecode);
	}).on('--help', function () {
		console.log('');
		console.log('Examples:');
	});


program
	.command('run')
	.description('execute the given remote cmd')
	.option("-d, --debug", "Which exec mode to use")
	.option("-u, --ui", "para usar desde ide, lee el programa de stdio")
	.option("-f, --file <path>", "para leer el archivo <path>")
	.action(function (options) {
		let vm = new VM();
		if (options.ui) {
			lex.fromStream(process.stdin).then(tokenlist => {
				let bytecode = parser.parse(tokenlist)
				if (bytecode.hasError) {
					console.log('1');
					console.log(JSON.stringify(bytecode.errors));
					
					return;
				} else console.log('0');
				
				vm.interpret(bytecode);
			});

		}else{
		console.log('probando...');

		bytecode.load('codigo.cj');
		db.dissasemble(bytecode, 'loaded');
		vm.interpret(bytecode);}
	}).on('--help', function () {
	});



function ejecutar(tokenlist){
	
}

program.parse(process.argv);